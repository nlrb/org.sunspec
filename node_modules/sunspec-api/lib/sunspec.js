Buffer.prototype.allZero = function() {
    for (var i = 1; i < this.length; i++) {
        if (this[i] !== 0) {
            return false;
		}
	}
    return true;
}

var sun = {
	// SunSpec Status types
	status: {
	   '1': { id: "I_STATUS_OFF", txt: "Off" },
	   '2': { id: "I_STATUS_SLEEPING", txt: "Sleeping (auto-shutdown)" },
	   '3': { id: "I_STATUS_STARTING", txt: "Starting up" },
	   '4': { id: "I_STATUS_MPPT", txt: "Tracking power point" },
	   '5': { id: "I_STATUS_THROTTLED", txt: "forced power reduction" },
	   '6': { id: "I_STATUS_SHUTTING_DOWN", txt: "Shutting down" },
	   '7': { id: "I_STATUS_FAULT", txt: "One or more faults exist" },
	   '8': { id: "I_STATUS_ST&&BY", txt: "Standby (service on unit)" }
	},

	// DID inverter types
	didInverter: {
	   '101': { id: "single", txt: "Single phase" },
	   '102': { id: "split", txt: "Split phase" },
	   '103': { id: "three", txt: "Three phase" }
	},

	// SunSpec inverter event flags
	inverterEventFlag: {
	   '0x00000001':  { id: "I_EVENT_GROUND_FAULT", txt: "Ground fault" },
	   '0x00000002':  { id: "I_EVENT_DC_OVER_VOLT", txt: "DC over voltage" },
	   '0x00000004':  { id: "I_EVENT_AC_DISCONNECT", txt: "AC disconnect open" },
	   '0x00000008':  { id: "I_EVENT_DC_DISCONNECT", txt: "DC disconnect open" },
	   '0x00000010':  { id: "I_EVENT_GRID_DISCONNECT", txt: "Grid shutdown" },
	   '0x00000020':  { id: "I_EVENT_CABINET_OPEN", txt: "Cabinet open" },
	   '0x00000040':  { id: "I_EVENT_MANUAL_SHUTDOWN", txt: "Manual shutdown" },
	   '0x00000080':  { id: "I_EVENT_OVER_TEMP", txt: "Over temperature" },
	   '0x00000100':  { id: "I_EVENT_OVER_FREQUENCY", txt: "Frequency above limit" },
	   '0x00000200':  { id: "I_EVENT_UNDER_FREQUENCY", txt: "Frequency under limit" },
	   '0x00000400':  { id: "I_EVENT_AC_OVER_VOLT", txt: "AC Voltage above limit" },
	   '0x00000800':  { id: "I_EVENT_AC_UNDER_VOLT", txt: "AC Voltage under limit" },
	   '0x00001000':  { id: "I_EVENT_BLOWN_STRING_FUSE", txt: "Blown String fuse on input" },
	   '0x00002000':  { id: "I_EVENT_UNDER_TEMP", txt: "Under temperature" },
	   '0x00004000':  { id: "I_EVENT_MEM||Y_LOSS", txt: "Generic Memory or Communication error (internal)" },
	   '0x00008000':  { id: "I_EVENT_HW_TEST_FAILURE", txt: "Hardware test failure" },
	},

	// SunSpec Common Model (1)
	commonModel: {
		modelName: "COM",
		modelSize: 68,
		blocks: [
			{
				blockType: "header",
				blockSize: 2,
				blockIds : [
					{ id: "ID" , size: 1, typ: "uint16", desc: "Common" },
					{ id: "L" , size: 1, typ: "uint16", desc: "Model length" }
				]
			}, 
			{ 
				blockType: "fixed",
				blockSize: 66,
				blockIds : [
					{ id: "Mn", size: 16, typ: "string", desc: "Manufacturer" },
					{ id: "Md", size: 16, typ: "string", desc: "Model" },
					{ id: "Opt", size: 8, typ: "string", desc: "Options" },
					{ id: "Ver", size: 8, typ: "string", desc: "Version" },
					{ id: "SN", size: 16, typ: "string", desc: "Serial Number" },
					{ id: "DA", size: 16, typ: "uint16", desc: "Device Address" },
					{ id: "Pad", size: 16, typ: "pad" },
				]
			}
		]
	},


	// SunSpec Inverter Model (101, 102, 103)
	inverterModel: {
		modelName: "INV",
		modelSize: 52,
		blocks: [
			{ 
				blockType: "header",
				blockSize: 2,
				blockIds : [
					{ id: "ID" , size: 1, typ: "uint16", desc: "Inverter ID" },
					{ id: "L" , size: 1, typ: "uint16", desc: "Model length" }
				]
			}, 
			{ 
				blockType: "fixed",
				blockSize: 50,
				blockIds : [
					{ id: "A", size: 1, typ: "uint16", sf: "A_SF", unit: "A", desc: "AC Current" },
					{ id: "AphA", size: 1, typ: "uint16", sf: "A_SF", unit: "A", desc: "Phase A Current" },
					{ id: "AphB", size: 1, typ: "uint16", sf: "A_SF", unit: "A", desc: "Phase B Current" },
					{ id: "AphC", size: 1, typ: "uint16", sf: "A_SF", unit: "A", desc: "Phase C Current" },
					{ id: "A_SF", size: 1, typ: "sunssf" },
					{ id: "PPVphAB", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage AB" },
					{ id: "PPVphBC", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage BC" },
					{ id: "PPVphCA", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage CA" },
					{ id: "PhVphA", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage AN" },
					{ id: "PhVphB", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage BN" },
					{ id: "PhVphC", size: 1, typ: "uint16", sf: "V_SF", unit: "A", desc: "Phase Voltage CN" },
					{ id: "V_SF", size: 1, typ: "sunssf" },
					{ id: "W", size: 1, typ: "int16", sf: "W_SF", unit: "W", desc: "AC Power" },
					{ id: "W_SF", size: 1, typ: "sunssf" },
					{ id: "Hz", size: 1, typ: "int16", sf: "Hz_SF", unit: "Hz", desc: "Line Frequency" },
					{ id: "Hz_SF", size: 1, typ: "sunssf" },
					{ id: "VA", size: 1, typ: "int16", sf: "VA_SF", unit: "VA", desc: "AC Apparent Power" },
					{ id: "VA_SF", size: 1, typ: "sunssf" },
					{ id: "VAr", size: 1, typ: "int16", sf: "VAr_SF", unit: "var", desc: "AC Reactive Power" },
					{ id: "VAr_SF", size: 1, typ: "sunssf" },
					{ id: "PF", size: 1, typ: "int16", sf: "PF_SF", unit: "%", desc: "AC Power Factor" },
					{ id: "PF_SF", size: 1, typ: "sunssf" },
					{ id: "WH", size: 2, typ: "acc32", sf: "WH_SF", unit: "Wh", desc: "AC Energy" },
					{ id: "WH_SF", size: 1, typ: "sunssf" },
					{ id: "DCA", size: 1, typ: "uint16", sf: "DCA_SF", unit: "A", desc: "DC Current" },
					{ id: "DCA_SF", size: 1, typ: "sunssf" },
					{ id: "DCV", size: 1, typ: "uint16", sf: "DCV_SF", unit: "V", desc: "DC Voltage" },
					{ id: "DCV_SF", size: 1, typ: "sunssf" },
					{ id: "DCW", size: 1, typ: "int16", sf: "DCW_SF", unit: "W", desc: "DC Power" },
					{ id: "DCW_SF", size: 1, typ: "sunssf" },
					{ id: "TmpCab", size: 1, typ: "int16", sf: "Tmp_SF", unit: "C", desc: "Cabinet Temperature" },
					{ id: "TmpSnk", size: 1, typ: "int16", sf: "Tmp_SF", unit: "C", desc: "Heat Sink Temperature" },
					{ id: "TmpTrns", size: 1, typ: "int16", sf: "Tmp_SF", unit: "C", desc: "Transformer Temperature" },
					{ id: "TmpOt", size: 1, typ: "int16", sf: "Tmp_SF", unit: "C", desc: "Other Temperature" },
					{ id: "Tmp_SF", size: 1, typ: "sunssf" },
					{ id: "St", size: 1, typ: "enum16", desc: "Operating state" },
					{ id: "StVnd", size: 1, typ: "enum16", desc: "Vend|| specific operating state code" },
					{ id: "Evt1", size: 2, typ: "bitfield32", desc: "Event fields" },
					{ id: "Evt2", size: 2, typ: "bitfield32", desc: "Reserved for future use" },
					{ id: "EvtVnd1", size: 2, typ: "bitfield32", desc: "Vendor defined events" },
					{ id: "EvtVnd2", size: 2, typ: "bitfield32", desc: "Vendor defined events" },
					{ id: "EvtVnd3", size: 2, typ: "bitfield32", desc: "Vendor defined events" },
					{ id: "EvtVnd4", size: 2, typ: "bitfield32", desc: "Vendor defined events" }
				]
			}
		]
	},

	// SunSpec meter types
	didMeter: {
		'201': { id: "single", txt: "Single Phase (AN || AB) Meter" },
		'202': { id: "split", txt: "Split Single Phase (ABN) Meter" },
		'203': { id: "wye", txt: "Wye-Connect Three Phase (ABCN) Meter" },
		'204': { id: "delta", txt: "Delta-Connect Three Phase (ABC) Meter" }
	},

	// SunSpec Meter Model (201, 202, 203, 204)
	meterModel: {
		modelName: "MTR",
		modelSize: 107,
		blocks: [
			{ 
				blockType: "header",
				blockSize: 2,
				blockIds : [
					{ id: "ID" , size: 1, typ: "uint16", desc: "Meter ID" },
					{ id: "L" , size: 1, typ: "uint16", desc: "Model length" }
				]
			}, 
			{ 
				blockType: "fixed",
				blockSize: 105,
				blockIds : [
					{ id: "A", size: 1, typ: "int16", sf: "A_SF", unit: "A", desc: "Total AC Current" },
					{ id: "AphA", size: 1, typ: "int16", sf: "A_SF", unit: "A", desc: "Phase A Current" },
					{ id: "AphB", size: 1, typ: "int16", sf: "A_SF", unit: "A", desc: "Phase B Current" },
					{ id: "AphC", size: 1, typ: "int16", sf: "A_SF", unit: "A", desc: "Phase C Current" },
					{ id: "A_SF", size: 1, typ: "sunssf" },
					{ id: "PhV", size: 1, typ: "int16", sf: "A_SF", unit: "V", desc: "Line to Neutral AC Voltage (average of active phases)" },
					{ id: "PhVphA", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage AN" },
					{ id: "PhVphB", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage BN" },
					{ id: "PhVphC", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage CN" },
					{ id: "PPV", size: 1, typ: "int16", sf: "A_SF", unit: "V", desc: "Line to Line AC Voltage (average of active phases)" },
					{ id: "PPVphAB", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage AB" },
					{ id: "PPVphBC", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage BC" },
					{ id: "PPVphCA", size: 1, typ: "int16", sf: "V_SF", unit: "V", desc: "Phase Voltage CA" },
					{ id: "V_SF", size: 1, typ: "sunssf" },
					{ id: "Hz", size: 1, typ: "int16", sf: "Hz_SF", unit: "Hz", desc: "Frequency" },
					{ id: "Hz_SF", size: 1, typ: "sunssf" },
					{ id: "W", size: 1, typ: "int16", sf: "W_SF", unit: "W", desc: "Total Real Power" },
					{ id: "WphA", size: 1, typ: "int16", sf: "W_SF", unit: "W", desc: "Watts phase A" },
					{ id: "WphB", size: 1, typ: "int16", sf: "W_SF", unit: "W", desc: "Watts phase B" },
					{ id: "WphC", size: 1, typ: "int16", sf: "W_SF", unit: "W", desc: "Watts phase C" },
					{ id: "W_SF", size: 1, typ: "sunssf" },
					{ id: "VA", size: 1, typ: "int16", sf: "VA_SF", unit: "VA", desc: "AC Apparent Power" },
					{ id: "VAphA", size: 1, typ: "int16", sf: "VA_SF", unit: "VA", desc: "VA phase A" },
					{ id: "VAphB", size: 1, typ: "int16", sf: "VA_SF", unit: "VA", desc: "VA phase B" },
					{ id: "VAphC", size: 1, typ: "int16", sf: "VA_SF", unit: "VA", desc: "VA phase C" },
					{ id: "VA_SF", size: 1, typ: "sunssf" },
					{ id: "VAR", size: 1, typ: "int16", sf: "VAR_SF", unit: "var", desc: "Reactive Power" },
					{ id: "VARphA", size: 1, typ: "int16", sf: "VAR_SF", unit: "var", desc: "VAR phase A" },
					{ id: "VARphB", size: 1, typ: "int16", sf: "VAR_SF", unit: "var", desc: "VAR phase B" },
					{ id: "VARphC", size: 1, typ: "int16", sf: "VAR_SF", unit: "var", desc: "VAR phase C" },
					{ id: "VAR_SF", size: 1, typ: "sunssf" },
					{ id: "PF", size: 1, typ: "int16", sf: "PF_SF", unit: "%", desc: "Power Factor" },
					{ id: "PFphA", size: 1, typ: "int16", sf: "PF_SF", unit: "%", desc: "VAR phase A" },
					{ id: "PFphB", size: 1, typ: "int16", sf: "PF_SF", unit: "%", desc: "VAR phase B" },
					{ id: "PFphC", size: 1, typ: "int16", sf: "PF_SF", unit: "%", desc: "VAR phase C" },
					{ id: "PF_SF", size: 1, typ: "sunssf" },
					// NOTE: latest SunSpec has changed below types from uint32 to acc32, but gives problems with SolarEdge implementation
					{ id: "TotWhExp", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Real Energy Exported" },
					{ id: "TotWhExpPhA", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Exported phase A" },
					{ id: "TotWhExpPhB", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Exported phase B" },
					{ id: "TotWhExpPhC", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Exported phase C" },
					{ id: "TotWhImp", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Real Energy Imported" },
					{ id: "TotWhImpPhA", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Imported phase A" },
					{ id: "TotWhImpPhB", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Imported phase B" },
					{ id: "TotWhImpPhC", size: 2, typ: "uint32", sf: "TotWh_SF", unit: "Wh", desc: "Total Watt-hours Imported phase C" },
					{ id: "TotWh_SF", size: 1, typ: "sunssf" },
					{ id: "TotVAhExp", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total Apparent Energy Exported" },
					{ id: "TotVAhExpPhA", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Exported phase A" },
					{ id: "TotVAhExpPhB", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Exported phase B" },
					{ id: "TotVAhExpPhC", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Exported phase C" },
					{ id: "TotVAhImp", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total Apparent Energy Imported" },
					{ id: "TotVAhImpPhA", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Imported phase A" },
					{ id: "TotVAhImpPhB", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Imported phase B" },
					{ id: "TotVAhImpPhC", size: 2, typ: "uint32", sf: "TotVAh_SF", unit: "VAh", desc: "Total VA-hours Imported phase C" },
					{ id: "TotVAh_SF", size: 1, typ: "sunssf" },
					{ id: "TotVArhImpQ1", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total Reactive Energy Imported Quadrant 1" },
					{ id: "TotVArhImpQ1PhA", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q1 phase A" },
					{ id: "TotVArhImpQ1PhB", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q1 phase B" },
					{ id: "TotVArhImpQ1PhV", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q1 phase C" },
					{ id: "TotVArhImpQ2", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total Reactive Energy Imported Quadrant 2" },
					{ id: "TotVArhImpQ2PhA", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q2 phase A" },
					{ id: "TotVArhImpQ2PhB", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q2 phase B" },
					{ id: "TotVArhImpQ2PhV", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Imported Q2 phase C" },
					{ id: "TotVArhExpQ3", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total Reactive Power Exported Quadrant 3" },
					{ id: "TotVArhExpQ3PhA", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q3 phase A" },
					{ id: "TotVArhExpQ3PhB", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q3 phase B" },
					{ id: "TotVArhExpQ3PhC", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q3 phase C" },
					{ id: "TotVArhExpQ4", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total Reactive Power Exported Quadrant 4" },
					{ id: "TotVArhExpQ4PhA", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q4 phase A" },
					{ id: "TotVArhExpQ4PhB", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q4 phase B" },
					{ id: "TotVArhExpQ4PhC", size: 2, typ: "uint32", sf: "TotVArh_SF", unit: "varh", desc: "Total VAr-hours Exported Q4 phase C" },
					{ id: "TotVArh_SF", size: 1, typ: "sunssf" },
					{ id: "Evt", size: 2, typ: "bitfield32", desc: "Meter Event Flags" }
				]
			}
		]
	},


	// SunSpec DIDs
	DID: {
		'001': { txt: "Common Block", model: 'commonModel', msg: "MSG_COMMON" },
		'002': { txt: "Aggregator Block" },
		'003': { txt: "Secure Dataset Read Model" },
		'004': { txt: "Secure Dataset Write Model" },
		'010': { txt: "Interface Configuration Model" },
		'011': { txt: "Ethernet Link Configuration" },
		'012': { txt: "IPv4 Protocol Configuration" },
		'013': { txt: "IPv6 Protocol Configuration" },
		'014': { txt: "Proxy Server Configuration" },
		'015': { txt: "Interface Packet Counters" },
		'016': { txt: "Simplified Network Configuration" },
		'017': { txt: "Serial Interface Configuration" },
		'018': { txt: "Cellular Link Configuration" },
		'019': { txt: "PPP Link Configuration" },
		// Inverter Models
		'101': { txt: "Single Phase Inverter Model (Integer+SF)", model: 'inverterModel', poll: true, msg: "MSG_INVERTER" },
		'102': { txt: "Split Phase Inverter Model (Integer+SF)", model: 'inverterModel', poll: true, msg: "MSG_INVERTER" },
		'103': { txt: "Phase Inverter Model (Integer+SF)", model: 'inverterModel', poll: true, msg: "MSG_INVERTER" },
		'111': { txt: "Single Phase Inverter Model (Floats)" },
		'112': { txt: "Split Phase Inverter Model (Floats)" },
		'113': { txt: "3 Phase Inverter Model (Floats)" },
		'120': { txt: "Inverter Controls Nameplate Ratings" },
		'121': { txt: "Inverter Controls Basic Settings" },
		'122': { txt: "Inverter Controls Measurements && Status" },
		'123': { txt: "Inverter Controls Immediate Controls" },
		'124': { txt: "Inverter Controls Basic Storage Control" },
		'125': { txt: "Inverter Controls Pricing Signal" },
		'126': { txt: "Inverter Controls Static Volt-VAR Arrays" },
		'127': { txt: "Inverter Controls Frequency Watt Control" },
		'128': { txt: "Inverter Controls Dynamic Reactive Current" },
		'129': { txt: "Inverter Controls LVRT Arrays" },
		'130': { txt: "Inverter Controls HVRT Arrays" },
		'131': { txt: "Inverter Controls Watt-Power Factor Arrays" },
		'132': { txt: "Inverter Controls Voltage-Watt Arrays" },
		'133': { txt: "Inverter Controls Basic Scheduling" },
		'160': { txt: "Inverter Multiple Power Point Tracker (MPPT)" },
		// Meter Models
		'201': { txt: "Single Phase Meter Model", model: 'meterModel', poll: true, msg: "MSG_METER" },
		'202': { txt: "Split Phase Meter Model", model: 'meterModel', poll: true, msg: "MSG_METER" },
		'203': { txt: "Wye-Connect Meter Model", model: 'meterModel', poll: true, msg: "MSG_METER" },
		'204': { txt: "Delta-Connect Meter Model", model: 'meterModel', poll: true, msg: "MSG_METER" },
		'211': { txt: "Single Phase Meter Model (float)" },
		'212': { txt: "Split Phase Meter Model (float)" },
		'213': { txt: "Wye-Connect Meter Model (float)" },
		'214': { txt: "Delta-Connect Meter Model (float)" },
		// Environmental Models
		'301': { txt: "Base Meteorological Model (DEPRECATED)" },
		'302': { txt: "Irradiance Model" },
		'303': { txt: "Back of Module Temperature Model" },
		'304': { txt: "Inclinometer Model" },
		'305': { txt: "Location Model" },
		'306': { txt: "Reference Point Model" },
		'307': { txt: "Base Meteorological Model (Corrected)" },
		'308': { txt: "Mini Meteorological Model" },
		// String Combiner Models
		'401': { txt: "Basic String Combiner (superseded)" },
		'402': { txt: "Advanced String Combiner (superseded)" },
		'403': { txt: "Basic String Combiner 1.1" },
		'404': { txt: "Advanced String Combiner 1.1" },
		// Module (Panel) Models
		'501': { txt: "Panel Model (Float)" },
		'502': { txt: "Panel Model (Integer)" },
		'601': { txt: "Tracker Model" },
		// SunSpec Reserved
		'65535': { txt: "End of SunSpec Map (0xFFFF)", tab: {} }
	}
}

var decode = {
	// decode.value
	value: function(typ, data) {
		var val;
		if (((typ == "uint16" || typ == "enum16" || typ == "bitfield16") && data.equals(Buffer([0xFF, 0xFF])))
			|| ((typ == "int16" || typ == "sunssf") && data.equals(Buffer([0x80, 0x00])))
			|| (typ == "acc16" && data.allZero())
			|| (typ == "int32" && data.equals(Buffer([0x80, 0x00, 0x00, 0x00])))
			|| ((typ == "acc32" || typ == "ipaddr") && data.allZero())
			|| ((typ == "uint32" || typ == "enum32" || typ == "bitfield32") && data.equals(Buffer([0xFF, 0xFF, 0xFF, 0xFF])))
			|| (typ == "float32" && data.equals(Buffer([0x7F, 0xC0, 0x00, 0x00])))
			|| (typ == "int64" && data.equals(Buffer([0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])))
			|| (typ == "acc64" && data.allZero())
			|| (typ == "ipv6addr" && data.allZero())
			|| (typ == "string" && data[0] == 0)) {
				val = null; // can mean 'Not Implemented', 'Not Accumulated' or 'Not Configured'
		} else {
			if (typ == "string") {
				val = data.toString('utf8', 0, data.indexOf(0));
			} else if (typ == "uint16" || typ == "acc16" || typ == "enum16" || typ == "bitfield16") { // unsigned 16 bit
				val = data[0] * 0x100 + data[1];
			} else if (typ == "int16" || typ == "sunssf") { // signed 16 bit
				val = data[0] * 0x100 + data[1];
				if ((data[0] & 0x80) == 0x80) {
					val += -0x10000;
				}
			} else if (typ == "uint32" || typ == "acc32" || typ == "enum32" || typ == "bitfield32") { // unsigned word
				val = data[0] * 0x1000000 + data[1] * 0x10000 + data[2] * 0x100 + data[3];
			} else if (typ == "int32") {
				val = data[0] * 0x1000000 + data[1] * 0x10000 + data[2] * 0x100 + data[3];
				if ((data[0] & 0x80) == 0x80) {
					val += -0x100000000;
				}
			} else if (typ == "ipaddr") {
				val = data[0] + '.' + data[1] + '.' + data[2] + '.' + data[3];
			} else if (typ == "acc64") {
					val = data[0] * 0x100000000000000 + data[1] * 0x1000000000000 + data[2] * 0x10000000000 + data[3] * 0x100000000
						+ data[4] * 0x1000000 + data[5] *0x10000 + data[6] * 0x100 + data[7];
			}
			// TODO: implement float32, int64, ipv6addr
	   }
	   return val
	},

	// decode.applyScaleFactor
	applyScaleFactor: function(value, scaleFactor) {
		if (value != null) {
			if (scaleFactor < 0) {
				value /= Math.pow(10, -scaleFactor);
			} else if (scaleFactor > 0) {
				value *= Math.pow(10, scaleFactor);
			}
		}
		return value;
	},

	// decode.model
	model: function(model, data) {
		var repCnt = 0;
		var idx = 0;
		var size = sun[model].modelSize;
		var name = sun[model].modelName;
		var sunValue = {}; // place-holder for model values
		for (var b = 0; b < sun[model].blocks.length; b++) {
			var block = sun[model].blocks[b];
			if (block.blockType == "repeat") {
				cnt = repCnt
			} else {
				cnt = 1
			}
			for (var i = 0; i < cnt; i++) {
				for (var j = 0; j < block.blockIds.length; j++) {
					if (idx < 2 * size) {
						var elem = block.blockIds[j];
						var id = elem.id;
						var src = data.slice(idx, idx + 2 * elem.size);
						var val = decode.value(elem.typ, src);
						idx = idx + 2 * elem.size;
						sunValue[name + '.' + id] = { val: val, sf: elem.sf };
						if (id == "L") { // Model size
							size = val;
							if (block.blockType == "header") {
								//TODO: calculate number of repeating blocks
								repCnt = val;
							}
						}
					}
				}
			}
		}
		return sunValue;
	}
}

module.exports = {
	map: sun,
	decode: decode
};